import { createContext, useContext, useReducer, FunctionComponent } from 'react';

import make{{pascalCase storeName}}Actions, { {{pascalCase storeName}}Actions, ADD_{{constantCase storeName}} } from './{{camelCase storeName}}Actions';

export interface {{pascalCase storeName}} {}

export interface {{pascalCase storeName}}State {
  [K: string]: {{pascalCase storeName}};
}

interface {{pascalCase storeName}}Context {
  {{camelCase storeName}}State: {{pascalCase storeName}}State;
  {{camelCase storeName}}Actions: ReturnType<typeof make{{pascalCase storeName}}Actions>;
}

const {{pascalCase storeName}}Context = createContext<{{pascalCase storeName}}Context>();

function {{camelCase storeName}}Reducer(state: {{pascalCase storeName}}State, action: {{pascalCase storeName}}Actions) {
  if (action.type === ADD_{{constantCase storeName}}) {
    return state;
  }

  return state;
}

export const {{pascalCase storeName}}Provider: FunctionComponent = ({ children }) => {
  const [{{camelCase storeName}}State, dispatch] = useReducer({{camelCase storeName}}Reducer, {});

  const {{camelCase storeName}}Actions = make{{pascalCase storeName}}Actions(dispatch);

  const value = { {{camelCase storeName}}State, {{camelCase storeName}}Actions };

  return <{{pascalCase storeName}}Context.Provider value={value}>{children}</{{pascalCase storeName}}Context.Provider>;
};

export const use{{pascalCase storeName}} = () => {
  const context = useContext({{pascalCase storeName}}Context);
  if (context === undefined) {
    throw new Error('use{{pascalCase storeName}} must be used within a {{pascalCase storeName}}Provider')
  }
  return context;
};
